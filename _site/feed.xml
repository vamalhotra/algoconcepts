<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-10-09T20:52:52+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Algoconcepts</title><subtitle>Programming concepts, algorithms, tips</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/algoconcepts/welcome-to-jekyll" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2020-10-09T16:40:28+05:30</published><updated>2020-10-09T16:40:28+05:30</updated><id>http://localhost:4000/algoconcepts/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/algoconcepts/welcome-to-jekyll">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">C4 Architecture Diagram</title><link href="http://localhost:4000/algoconcepts/C4-Architecture-Diagram" rel="alternate" type="text/html" title="C4 Architecture Diagram" /><published>2020-09-22T06:13:56+05:30</published><updated>2020-09-22T06:13:56+05:30</updated><id>http://localhost:4000/algoconcepts/C4-Architecture-Diagram</id><content type="html" xml:base="http://localhost:4000/algoconcepts/C4-Architecture-Diagram">&lt;h1 id=&quot;c4-architecture-diagram&quot;&gt;C4 Architecture Diagram&lt;/h1&gt;

&lt;p&gt;Often you need to communicate with different partners about the project you’re working on. These partners could be from technical background or non-technical background and can be interested in different views of the project architecture. C4 architecture diagrams proposes system diagram at four different zoom level.&lt;/p&gt;

&lt;p&gt;C1 - Context (System Context Diagram)&lt;/p&gt;

&lt;p&gt;This presents User or outsider perspective and just lays down the high level black boxes in the system.&lt;/p&gt;

&lt;p&gt;C2 - Container diagram&lt;/p&gt;

&lt;p&gt;This presents high level system diagram with different blocks like applications, services, databases in the system&lt;/p&gt;

&lt;p&gt;C3 - Component Diagram&lt;/p&gt;

&lt;p&gt;This presents details of a container like multiple tables in a database or multiple controllers in a webapp.&lt;/p&gt;

&lt;p&gt;C4 - Code Diagram&lt;/p&gt;

&lt;p&gt;This presents details of a components like  methods and properties and how the component is implemented like base class, abstract classes etc.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;https://www.infoq.com/articles/C4-architecture-model/&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">C4 Architecture Diagram</summary></entry><entry><title type="html">Multi Dimensional Arrays In C# (Jagged Vs Rectangular Arrays)</title><link href="http://localhost:4000/algoconcepts/Multi-dimensional-arrays-in-C" rel="alternate" type="text/html" title="Multi Dimensional Arrays In C# (Jagged Vs Rectangular Arrays)" /><published>2020-09-06T01:25:11+05:30</published><updated>2020-09-06T01:25:11+05:30</updated><id>http://localhost:4000/algoconcepts/Multi-dimensional-arrays-in-C</id><content type="html" xml:base="http://localhost:4000/algoconcepts/Multi-dimensional-arrays-in-C">&lt;h1 id=&quot;multi-dimensional-arrays-in-c-jagged-vs-rectangular-arrays&quot;&gt;Multi dimensional arrays in C# (Jagged vs rectangular arrays)&lt;/h1&gt;

&lt;p&gt;CSharp (C#, Chash) provides two ways to declare multi-dimensional array&lt;/p&gt;

&lt;p&gt;1) Using comma notation - 2d array as [,] , 3d array as [,,], also called as rectangular arrays&lt;/p&gt;

&lt;p&gt;2) Using multiple square brackets - 2d array as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[][]&lt;/code&gt; , 3d array as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[][][]&lt;/code&gt; , also called as jagged arrays.&lt;/p&gt;

&lt;p&gt;The difference is that comma notation defines a rectangular matrix like 2-d array in which width and height are fixed i.e. each row of matrix will have same no. of columns.&lt;/p&gt;

&lt;p&gt;In square brackets notation, we define an array of arrays or array of pointers where each row can have a array of variable length. While initializing, we only need to specify the length of first dimension.&lt;/p&gt;

&lt;h2 id=&quot;which-one-is-better&quot;&gt;Which one is better?&lt;/h2&gt;

&lt;p&gt;The comma notation array declares a contiguous block of memory of size &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;width * height&lt;/code&gt;. In array of arrays, each 1-d array is a contiguous block of memory and the 2-d array is array of pointers. It’s bit faster to access the array of arrays as it can directly access the pointer. But in practice, there’s not much performance difference. You should choose the one you need i.e. if you do not need variable length arrays, you can just go with rectangular notation.&lt;/p&gt;

&lt;h2 id=&quot;how-to-initialize-2-d-array-in-c&quot;&gt;How to initialize 2-d array in C#&lt;/h2&gt;

&lt;p&gt;Following initializes a 2-d array of arrays:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var array2d = new int[][]{
                new int[] { 1, 2 },
                new int[] { 2, 3 },
                new int[] { 5 },
                new int[] { 0 },
                new int[] { 5 },
                new int[] { }
            };&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Following initializes a 2-d matrix:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var matrix = new int[,]{
                { 1, 3 },
                { 2, 3},
            };&lt;/code&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Multi dimensional arrays in C# (Jagged vs rectangular arrays)</summary></entry><entry><title type="html">Multiple Loop Vs Single Loop</title><link href="http://localhost:4000/algoconcepts/Multiple-loop-vs-single-loop" rel="alternate" type="text/html" title="Multiple Loop Vs Single Loop" /><published>2020-08-30T23:08:46+05:30</published><updated>2020-08-30T23:08:46+05:30</updated><id>http://localhost:4000/algoconcepts/Multiple-loop-vs-single-loop</id><content type="html" xml:base="http://localhost:4000/algoconcepts/Multiple-loop-vs-single-loop">&lt;h1 id=&quot;multiple-loop-vs-single-loop&quot;&gt;Multiple loop vs single loop&lt;/h1&gt;

&lt;p&gt;Do you often find yourself writing code like this&lt;/p&gt;

&lt;p&gt;for(;;)&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;while(;){}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Usually, we have two pointers here - one pointer gets incremented in main for loop and the second pointer gets incremented in inner while loop. When you come across such pattern, think of “two-pointer technique” and see if you can use single loop (i.e. main for loop) only to restructure this code to be more readable. We all have seen this technique in use in merge part of merge-sort.&lt;/p&gt;

&lt;p&gt;This is sample problem:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.blogger.com/blog/post/edit/4438036435031235392/4602686676160668539#&quot;&gt;https://leetcode.com/problems/assign-cookies/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check the two functions below which are doing the same thing but in a slightly different way. If we cannout use two pointers, we should consider moving the second loop in a different function. The code with single loop is more readable, robust and easier to debug if things go wrong than using multiple loops.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/vamalhotra/c83addfac8507a4928af48a37e9b19a1.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><summary type="html">Multiple loop vs single loop</summary></entry><entry><title type="html">Numpy Arrays</title><link href="http://localhost:4000/algoconcepts/Numpy-Arrays" rel="alternate" type="text/html" title="Numpy Arrays" /><published>2020-06-19T21:11:29+05:30</published><updated>2020-06-19T21:11:29+05:30</updated><id>http://localhost:4000/algoconcepts/Numpy-Arrays</id><content type="html" xml:base="http://localhost:4000/algoconcepts/Numpy-Arrays">&lt;h1 id=&quot;numpy-arrays&quot;&gt;Numpy Arrays&lt;/h1&gt;

&lt;p&gt;Arrays in numpy are called as ndarray, n-dim array.&lt;/p&gt;

&lt;h2 id=&quot;properties&quot;&gt;Properties&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Rank = number of dimension of ndarray.&lt;/li&gt;
  &lt;li&gt;Shape = tuple giving size along each dimension&lt;/li&gt;
  &lt;li&gt;ndim = no. of dimensions&lt;/li&gt;
  &lt;li&gt;size = total no. of elements across all dimensions&lt;/li&gt;
  &lt;li&gt;dtype = type of elements in the array (leaf element type)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;constructing-array&quot;&gt;Constructing array&lt;/h2&gt;

&lt;p&gt;np.array(python_list_or_tuple)&lt;/p&gt;

&lt;p&gt;np.zeros(shape_tuple) : an ndarray of given shape filled with all zeros. If you want to fill with some value, use np.fill. For ones, np.ones(). np.empty() for nd array without initializing with 0’s or 1’s.&lt;/p&gt;

&lt;p&gt;np.fill(shape_tuple, const_value, dtype = ‘dtype’)&lt;/p&gt;

&lt;h2 id=&quot;array-indexing&quot;&gt;Array Indexing&lt;/h2&gt;

&lt;h3 id=&quot;slicing&quot;&gt;Slicing&lt;/h3&gt;

&lt;p&gt;n[start : end : step] start default value is 0, end default value is length of array in that dimension, step default value is 1&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;::2 will return list containing alternate element&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;-1 will return list containing all except last element (-1 means last element because if you go beyond 0, array loops back to last element, so -2 will be last second array)&lt;/p&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;[-1] will return just the last element&lt;/p&gt;

&lt;h3 id=&quot;indexing&quot;&gt;Indexing&lt;/h3&gt;

&lt;p&gt;Lists are passed for each dimension.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n[[0,1,2],[0,1,2]]&lt;/code&gt; will return elements at (0,0), (1,1), (2,2)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arr = np.array([[1,2,3],[4, 5, 6],[7, 8,9]])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print(arr[[0,1,2],[0,1,2]])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Indexing using boolean:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cond = arr &amp;gt; 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arr[cond]&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;other-useful-functions&quot;&gt;Other Useful functions&lt;/h3&gt;

&lt;p&gt;arr.max(), arr.max(axis=1), arr.sum(), arr.cumsum(axis=1)&lt;/p&gt;

&lt;p&gt;arr1*arr2 #element-wise multiplication&lt;/p&gt;

&lt;p&gt;arr1.dot(arr2) #matrix multiplication&lt;/p&gt;

&lt;p&gt;np.sin(arr), np.exp(arr), np.sqrt(arr)&lt;/p&gt;

&lt;p&gt;arr.reshape((2,8)) #a 4x4 array can be reshaped into 2,8.&lt;/p&gt;

&lt;p&gt;arr.flatten(‘C’) or arr.flatten(‘F’) #row or col wise&lt;/p&gt;</content><author><name></name></author><summary type="html">Numpy Arrays</summary></entry><entry><title type="html">Delegate In C#</title><link href="http://localhost:4000/algoconcepts/Delegate-in-C" rel="alternate" type="text/html" title="Delegate In C#" /><published>2020-05-24T06:16:41+05:30</published><updated>2020-05-24T06:16:41+05:30</updated><id>http://localhost:4000/algoconcepts/Delegate-in-C</id><content type="html" xml:base="http://localhost:4000/algoconcepts/Delegate-in-C">&lt;h1 id=&quot;delegate-in-c&quot;&gt;Delegate in C#&lt;/h1&gt;

&lt;p&gt;Delegates in C# are similar to function pointer in C++. A function pointer can hold reference to a function and can be invoked with arguments, if any, just like a function.&lt;/p&gt;

&lt;p&gt;This article talks about delegates, and generic delegates namely Action and Func which was introduced with C# 3.0. We will also discuss about Predicate which is a special delegate. Finally, we will talk about events and how delegates are useful to define the signature of event handler in subscriber class.&lt;/p&gt;

&lt;h2 id=&quot;delegate&quot;&gt;Delegate&lt;/h2&gt;

&lt;p&gt;Delegates in C# inherit from System.MulticastDelegate (which inherits from System.Delegate and, in turn, from System.Object). This class provides a linked list of delegates which are invoked synchronously in order.&lt;/p&gt;

&lt;h3 id=&quot;using-named-functions&quot;&gt;Using named functions:&lt;/h3&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;//declare delegate aka function pointer which can &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//point to a function which returns void and takes no arguments&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//declare named function&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WriteInformation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Got Here&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CallFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Assign named function to delegate.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Signature of delegate and named function should match&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//thus, providing type safety.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteInformation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Delegates can be combined by calling the Delegate.Combine method, and it must be invoked through the DynamicInvoke() method. The delegates are invoked synchronously in the order in which they appear in Combine(). If an error occurs during execution, an exception is thrown.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WriteInformation2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Write Information 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CallFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteInformation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteInformation2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Combine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DynamicInvoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;using-anonymous-methods&quot;&gt;Using Anonymous methods&lt;/h3&gt;

&lt;p&gt;Instead of created a named function, we can often write an anonymous method inline. If anonymous method uses any variable defined in the function, its reference would be retained until the delegate/function-pointer is valid.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CallFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This method is anonymous&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;generic-delegates&quot;&gt;Generic Delegates&lt;/h2&gt;

&lt;p&gt;The above code created custom delegate which takes string parameter. C# 3.0 introduced generic delegates which can take generic parameter. It introduced two generic delegate types &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Func&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Action&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Func is a generic delegate included in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System&lt;/code&gt; namespace. It has zero or more &lt;em&gt;input&lt;/em&gt; parameters and one &lt;em&gt;out&lt;/em&gt; parameter. The last parameter is considered as an out parameter.&lt;/p&gt;

&lt;p&gt;An Action type delegate is the same as &lt;strong&gt;&lt;em&gt;Func&lt;/em&gt;&lt;/strong&gt; delegate except that the Action delegate doesn’t return a value. In other words, an Action delegate can be used with a method that has a void return type.&lt;/p&gt;

&lt;h3 id=&quot;action&quot;&gt;Action&lt;/h3&gt;

&lt;p&gt;Using Action, you do not need to declare delegate.  Action delegate can have 0 to 16 input parameters.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/*public delegate void Function(string s); Not needed */
    
//declare named function
public void WriteInformation(string s)
{
    Debug.WriteLine(s);
}

public void CallFunction()
{
    /*Function function = new Function(WriteInformation);*/
    //Initializing action by directly assigning method
    Action&amp;lt;string&amp;gt; actionDelegate = WriteInformation;
    actionDelegate('Action delegate');
    
    //Initializing action using new keyword
    Action&amp;lt;string&amp;gt; actionDelegate2 = new Action&amp;lt;string&amp;gt;(WriteInformation);
    actionDelegate2('Same as above')
    
    //Initializing action using anonymous method
    Action&amp;lt;string&amp;gt; actionDelegate3 = delegate(string s){ Debug.WriteLine(s);};
    actionDelegate3('Action using Anonymous method')
    
    //Initializing action using lambda method
    Action&amp;lt;string&amp;gt; actionDelegate4 = s =&amp;gt; Debug.WriteLine(s);
    actionDelegate4('Action using lambda method')
} ### Func
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In below code, sum and SomeOperation are equivalent and both can hold a function pointer that takes two integers and return an integer.
In Func, last parameter is the output type and remaining parameters are input.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//Declaring a delegate&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SomeOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Using Func without declaring delegate&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Below code defines a func which has zero input parameters.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;funcWithZeroInputParams&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rnd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Func with lambda expression&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;funcWithZeroInputParams&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumTwoNumbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;predicate&quot;&gt;Predicate&lt;/h2&gt;

&lt;p&gt;A predicate is also a delegate like Func and Action. It represents a method that takes a single input parameter and returns a bool.&lt;/p&gt;

&lt;p&gt;It is defined in System namespace as below:&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IsLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToLower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isLower&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IsLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isLower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another way to write above code without using named method&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isLower&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToLower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using lambda expression&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isLower&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToLower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;events&quot;&gt;Events&lt;/h2&gt;

&lt;p&gt;An event is a wrapper around a delegate. It depends on the delegate. Events follows the observer design pattern. There’s a publisher class which generates events and there can be one or multiple subscriber classes which subscribe to the event in order to receive notification (in “push” model) as soon as the event is generated. Events can be declared static, virtual, sealed, and abstract. Event handlers are invoked synchronously if there are multiple subscribers.&lt;/p&gt;

&lt;p&gt;An event can be declared in two steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Declare a delegate.&lt;/li&gt;
  &lt;li&gt;Declare a variable of the delegate with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;event&lt;/code&gt; keyword.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public delegate void Notify(object o);  // delegate

public class EventPublisher
{
    public event Notify ProcessCompleted; // event

    protected virtual void OnNotify(object o)
    {
        ProcessCompleted.Invoke(o); //calls all event handler methods registered with this event
    }
}

public class Subscriber
{
	public void SubscribeToEvent(EventPublisher publisher)
	{
	    publisher.ProcessCompleted += HandleEvent;
	}
	
	//HandleEvent must match the delegate declared by publisher class.
	private void HandleEvent(object o)
	{
	    //Do some work
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Instead of declaring delegate as above by EventPublisher class, we can use two pre-defnied delegates: EventHandler and EventHandler&lt;TEventArgs&gt;&lt;/TEventArgs&gt;&lt;/p&gt;

&lt;p&gt;TEventArgs could be simple or complex type and can be used when we need to send some data back to subscribers. When no data need to be sent, first delegate “EventHandler” should be sufficient.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomEventArgs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventArgs&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventTime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EventPublisher&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcessCompletedWithoutArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CustomEventArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcessCompletedWithArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnNotifyWithoutArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ProcessCompletedWithoutArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnNotifyWithArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ProcessCompletedWithArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProcessEventArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CustomData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TestData&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventTime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EventSubscriber&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SubscribeToEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EventPublisher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;publisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessCompletedWithoutArgs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HandleEventWithoutArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   	    &lt;span class=&quot;n&quot;&gt;publisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessCompletedWithArgs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HandleEventWithArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HandleEventWithArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomEventArgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HandleEventWithoutArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventArgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Delegate in C#</summary></entry><entry><title type="html">Memory Issues With Closures In C#</title><link href="http://localhost:4000/algoconcepts/Memory-issues-with-closures-in-C" rel="alternate" type="text/html" title="Memory Issues With Closures In C#" /><published>2020-05-23T06:17:28+05:30</published><updated>2020-05-23T06:17:28+05:30</updated><id>http://localhost:4000/algoconcepts/Memory-issues-with-closures-in-C</id><content type="html" xml:base="http://localhost:4000/algoconcepts/Memory-issues-with-closures-in-C">&lt;h1 id=&quot;memory-issues-with-closures-in-c&quot;&gt;Memory issues with closures in C#&lt;/h1&gt;

&lt;p&gt;A closure in C# is implemented via anonymous methods or lambda functions. If we use any variables inside a closure, those variables will be available as long as closure is visible. Under the hood, compiler generates a dynamic class for each closure and stores all the variables needed by closure. This results in memory for referenced variable not freed as long as as closure is available for use in the code. The lesson is to be careful when using memory intensive variables inside the closure. Sometimes, we just need a small bit of information inside the closure from a large variable outside the closure. It is a good idea to just pass the smaller information inside the closure.&lt;/p&gt;

&lt;p&gt;Ref.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://csharpindepth.com/Articles/Closures&quot;&gt;What is closure&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Under the Hood of .NET Management by Chris Farrell&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Memory issues with closures in C#</summary></entry><entry><title type="html">Using Cmake To Generate Visual Studio Project In Windows</title><link href="http://localhost:4000/algoconcepts/Using-CMake-to-generate-Visual-studio-project-in-windows" rel="alternate" type="text/html" title="Using Cmake To Generate Visual Studio Project In Windows" /><published>2020-05-06T18:26:43+05:30</published><updated>2020-05-06T18:26:43+05:30</updated><id>http://localhost:4000/algoconcepts/Using-CMake-to-generate-Visual-studio-project-in-windows</id><content type="html" xml:base="http://localhost:4000/algoconcepts/Using-CMake-to-generate-Visual-studio-project-in-windows">&lt;h1 id=&quot;using-cmake-to-generate-visual-studio-project-in-windows&quot;&gt;Using CMake to generate Visual studio project in windows&lt;/h1&gt;

&lt;p&gt;A project using cmake will come with CMakeLists.txt script. This script defines targets where each target represents an executable or library or some other output for the build pipeline. On windows, we can use CMakeLists.txt to generate sln/vcproj files which can then be opened in visual studio and compiled/debugged in regular manner.&lt;/p&gt;

&lt;p&gt;If you have never used cmake, first step is to download cmake binaries from https://cmake.org/download/&lt;/p&gt;

&lt;p&gt;Step 2 is to open cmd and cd to folder containing CMakeLists.txt.&lt;/p&gt;

&lt;p&gt;Step 3 is to generate sln/vcproj files by running following commands:&lt;/p&gt;

&lt;p&gt;#Create build directory&lt;/p&gt;

&lt;p&gt;mkdir build&lt;/p&gt;

&lt;p&gt;cd build&lt;/p&gt;

&lt;p&gt;#Generate sln file for a target version of visual studios&lt;/p&gt;

&lt;p&gt;#list all available targets.&lt;/p&gt;

&lt;p&gt;cmake –help&lt;/p&gt;

&lt;p&gt;#generate files for a selected target. Last .. points to parent directory where CMakeLists.txt exists.&lt;/p&gt;

&lt;p&gt;cmake -G “Visual Studio 15 2017 Win64” ..&lt;/p&gt;

&lt;p&gt;Alternatively, above commands can be replaced with:&lt;/p&gt;

&lt;p&gt;mkdir build
cmake -H. -Bbuild&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://preshing.com/20170511/how-to-build-a-cmake-based-project/#running-cmake-from-the-command-line&quot;&gt;https://preshing.com/20170511/how-to-build-a-cmake-based-project/#running-cmake-from-the-command-line&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Using CMake to generate Visual studio project in windows</summary></entry><entry><title type="html">Segment Trees</title><link href="http://localhost:4000/algoconcepts/Segment-Trees" rel="alternate" type="text/html" title="Segment Trees" /><published>2020-02-29T22:22:56+05:30</published><updated>2020-02-29T22:22:56+05:30</updated><id>http://localhost:4000/algoconcepts/Segment-Trees</id><content type="html" xml:base="http://localhost:4000/algoconcepts/Segment-Trees">&lt;h1 id=&quot;segment-trees&quot;&gt;Segment Trees&lt;/h1&gt;

&lt;p&gt;Segment Tree is a very useful data structure to work efficiently with range queries over a n-dimension array. It can be used to answer sum of a given range and update element in the range in O(log N) time.&lt;/p&gt;

&lt;p&gt;In list of various  sample applications below, it is assumed we are given an N element array A[0..N].&lt;/p&gt;

&lt;h2 id=&quot;applications&quot;&gt;Applications&lt;/h2&gt;

&lt;p&gt;Find sum of all elements in the given range i.e. sum over subarray A[i..j]&lt;/p&gt;

&lt;p&gt;Update any element in the array i.e. A[i] = X&lt;/p&gt;

&lt;p&gt;Find maximum or minimum element in the given range [i, j]&lt;/p&gt;

&lt;p&gt;Find count of occurrence of maximum or minimum element in the range [i, j]&lt;/p&gt;

&lt;p&gt;Find count of occurrences of a number in the range[i, j] or find index of k-th occurence of the number&lt;/p&gt;

&lt;p&gt;Compute the GCD / LCM of all numbers of given ranges of the array&lt;/p&gt;

&lt;p&gt;Find smallest index i s.t. sum of first i elements is greater than equal to X in O(log N) time&lt;/p&gt;

&lt;p&gt;Find maximum sum sub-array in given range&lt;/p&gt;

&lt;p&gt;Given three numbers (l,r,x), we have to find the minimal number in the segment ‘a[l…r]’ which is greater than or equal to x in poly-logarithmic (O log 2 n)&lt;/p&gt;

&lt;p&gt;Construction&lt;/p&gt;

&lt;p&gt;Problems&lt;/p&gt;</content><author><name></name></author><summary type="html">Segment Trees</summary></entry><entry><title type="html">Unix Design Philosophy</title><link href="http://localhost:4000/algoconcepts/Unix-Design-Philosophy" rel="alternate" type="text/html" title="Unix Design Philosophy" /><published>2020-02-23T21:42:24+05:30</published><updated>2020-02-23T21:42:24+05:30</updated><id>http://localhost:4000/algoconcepts/Unix-Design-Philosophy</id><content type="html" xml:base="http://localhost:4000/algoconcepts/Unix-Design-Philosophy">&lt;p&gt;&lt;strong&gt;Rule of Modularity&lt;/strong&gt;: Write simple parts connected by clean interfaces.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rule of Composition&lt;/strong&gt;: Design programs to be connected to other programs&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rule of Separation&lt;/strong&gt;: Separate policy from mechanism; separate interfaces from engines&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rule of Parsimony&lt;/strong&gt;: Write a big program only when it is clear by demonstration that nothing else will do&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rule of Transparency&lt;/strong&gt;: Design for visibility to make inspection and debugging easier&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rule of Diversity&lt;/strong&gt;: Distrust all claims for “one true way”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rule of Extensibility&lt;/strong&gt;: Design for the future, because it will be here sooner than you think&lt;/p&gt;</content><author><name></name></author><summary type="html">Rule of Modularity: Write simple parts connected by clean interfaces.</summary></entry></feed>